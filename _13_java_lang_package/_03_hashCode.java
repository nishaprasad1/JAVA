package _13_java_lang_package;
/*
 2. hashCode():
 
--> for every object a unique number generated by jvm, which is nothing
 but hashcode.

--> hashcode won't represent address of object.

--> jvm will use hashcode while saving objects into hashing related
 data structures like hashTable, hashMap, hashSet etc.

--> the main advantage of saving objects based on hashcode is search
 operation will become easy(the most powerful search upto today is hashing).

--> if we are giving the chance to Object class hashCode() method, it will
	generate hashcode based on address of the object it doesn't mean hashcode
	represent address of the object.
--> Based on our requirement we can override hashcode method in our class to
	generate our own hashcode.
--> Overriding hashCode() method is said to to be proper if and only if for
	every object we have to generate a unique number as hashcode.

--------------------------------------------+---------------------------------------------------------
	class Student{							|			class Student{  
		int rollNo;							|				int rollNo;
											|				
		@Override							|				@Override
		public int hashCode() {				|				public int hashCode() {
			return 100;						|					return rollNo;
		}									|				}
	}										|			}
improper way(because for all Student		|  proper way(this is proper way of overriding hashCode()
objects we are generating same number		|  method because we we are generating a different hashcode
as hashcode).								|   for every object).
--------------------------------------------+-----------------------------------------------------------

--> toString() vs hashCode()
1. if we are giving chance to Object class toString() method, it will internally
	call hashCode() method.
2. if we are overriding toString() method then our toString() method may not call
	hashCode() method.
	
example 1:

		class Test{
			int i;
			Test(int i){
				this.i=i;
			}
			
			public static void main(String[] args) {
				Test t1 = new Test(10);
				Test t2 = new Test(100);
		
				System.out.println(t1);//Test@abcd, ie Test@<any hexadecimal code>
				System.out.println(t2);//Test@2b26e, ie Test@<any hexadecimal code>
			}
		}
	here,  System.out.println(t1); will call
					toString();======> from Object class
						|
						| (getClass().getName() + "@" + Integer.toHexString(hashCode()))// this will call
						|	
					   \|/
					   hashCode();===> Object class

example 2:

		class Test{
			int i;
			Test(int i){
				this.i=i;
			}
			@Override
			public int hashCode() {
				return i;
			}
			public static void main(String[] args) {
				Test t1 = new Test(10);
				Test t2 = new Test(100);
		
				System.out.println(t1);//Test@a, ie Test@<hexadecimal representation of 10>
				System.out.println(t2);//Test@64, ie Test@<hexadecimal representation of 100>
			}
		}
	here,  System.out.println(t1); will call
					toString();======> from Object class
						|
						| (getClass().getName() + "@" + Integer.toHexString(hashCode()))// this will call
						|	
					   \|/
					   hashCode();===> Test class as we have overridden hashCode() method

example 3:

		class Test{
			int i;
			Test(int i){
				this.i=i;
			}
			@Override
			public String toString() {
				return i+"";
			}
			@Override
			public int hashCode() {
				return i;
			}
			public static void main(String[] args) {
				Test t1 = new Test(10);
				Test t2 = new Test(100);
		
				System.out.println(t1);//10 
				System.out.println(t2);//100
			}
		}
	here,  System.out.println(t1); will call
					toString();======> from Test class.
					   
 */
public class _03_hashCode {	public static void main(String[] args) {}}

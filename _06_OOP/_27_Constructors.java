package _06_OOP;

public class _27_Constructors {
/*
 * 1. Once we create an object compulsary we should perform initialization, then only
 * 		the object is in a position to respond properly.
 * 
 * 2. whenever we are creating an object some piece of the code will be executed
 * 		automatically to perform initialization of the object, this piece of the 
  		code is called constructor.
  		
		  		class Student{
					String name;
					int rollNo;
					Student(String name, int rollNo){
						this.name=name;
						this.rollNo=rollNo;
					}
					public static void main(String[] args) {
						Student s1 = new Student("Chandrakesh", 2);
						Student s2 = new Student("Anil", 3);
					}
				}
				
 * 3. the main purpose of the constructor is to perform initialization of the object
 * 		but not to create object.
 *
 * 4. constructor vs instance block
 * 
 * constructor: to initialize an object.
 * instance block: other than initialization if we want to perform any activity for every
 * 					 object creation then we should go for instance block(like updating one
 * 						entry in db for every object creation or incrementing count value for
 * 						every object creation etc.)
 * -->Both constructor and instance block have their own different purposes and replacing
 * one concept with another may not work always.
 * -->Both constructor and instance block will be executed for every object creation but
 * 		instance block first followed by constructor.
 * 					
 * Q) Demo program to print number of objects created for the class?
				class Test{
					static int count =0;
					{
						count++;
						
					}
					Test(){
					}
					Test(int i){
					}
					Test(double d){
					}
					public static void main(String[] args) {
						Test t1 = new Test();
						Test t2 = new Test(2);
						Test t3 = new Test(10d);
						System.out.println("No. of objects created: "+Test.count);
					}
				}
-------------
 * Rules for writing constructors:
 * a) Name of the class and name of the consturctor must be matched.
 * b) Return type concept not applicable for constructor even void also. By mistake if we
 * 		are trying to declare return type for constructor then we wont get any compile
 * 		time error because compiler treat it as method.
							class Test{
								void Test() {//---> it is method and not constructor
								}
							}
 --> hence it is legal but stupid to have a method whose name is exactly same as class name.
 class Test{
	void Test() {//---> it is method and not constructor
		System.out.println("method but not constructor");
	}
	public static void main(String[] args) {
		Test t = new Test();
		t.Test();
	}
}
 
 * c) the only applicable modifiers for constructors are:
 * 		public, private, protected, default
		class Test{
		//	static Test() {  //CE:Illegal modifier for the constructor in type Test;
							//only public, protected & private are permitted
		//	}
		
		}
 =======================================================================
 * i) compiler is responsible to generate default constructor(but not jvm)
 * ii) if we are not writing any constructor then only compiler will generate
 * 		default constructor, ie if we are writing atleast one constructor then
 * 		compiler wont generate default constructor, hence every class in java
 * 		can contain constructor it may be default constructor generated by compiler
 * 		or customized constructor explicitly provided by programmer but not both
 * 		simultaneouly.
 =======================================================================
--> Prototype of default constructor:
1) it is always no-arg constructor
2) the access modifier of default constructor is exaclty same as access modifier of
	class(this rule is applicable for public and default).
	                          +----------+
3) it contains only one line  + super(); + , it is a no-argument call to super class constructor.
                              +----------+
 =======================================================================
    Programers code    |     Compiler generated code
-------------------------------------------------------------    
1.  				   |
class Test{            |          class Test{
					   |			Test(){
					   |			  super();
									}
}                                }
--------------------------------------------------------------
2.
public class Test{               public class Test{
									public Test(){
										super();
									}
}								 }
--------------------------------------------------------------
3.
public class Test{               public class Test{
  void Test(){						public Test(){----->default constructor
										super();
  }									}
}  									void Test(){------> method
  									
  									}
								 }
--------------------------------------------------------------
4.
class Test{               		 class Test{
  Test(){							Test(){
									  super();
  }									}
}								 }
--------------------------------------------------------------
5.
class Test{               		 class Test{
  Test(int i){						Test(int i){
										super();
  }									}
}								 }
--------------------------------------------------------------
6.
class Test{               		 	class Test{
	Test(){								Test(){
		this(10);							this(10);
	}									}
  	Test(int i){						Test(int i){
										super();
  	}									}
}								 	}
--------------------------------------------------------------
=================================================================
--> the first line inside every constructor should be either super() or this() and
if we are not writing anything compiler will always place super().

case 1) we can take super() or this() only in 1st line of constructor if we are trying
		to take anywhere else.
 		class Test{
			Test(){
				System.out.println("constructor");
		//		super();//CE:Constructor call must be the first statement in a constructor
			}
		}
---		
case 2) inside the constructor we can take either super() or this() but not both
 		simultaneously.
 		class Test{
			Test(){
				super();
		//		this();//CE:Constructor call must be the first statement in a constructor
			}
		}
---		
case 3) we can write super() or this() only inside a constructor, if we are trying to use 
		outside of constructor we will get CE, ie we can call a constructor directly
		from another constructor only.
		class Test{
			public void m1(){
		//		super();//CE:Constructor call must be the first statement in a constructor
				System.out.println("hello");
			}
		}
===============================
		________________
		|              |---------->we can use only in constructors.
		| super();     | 
		|              |---------->only in 1st line.
		| this();      |
		|______________|----------> only one but not both simutaneously.

===============================
		super(), this()                 vs 			   super,this
1) these are constructor calls	to                  1) these are keywords to refer super 
	call super class and current class                 class and current class instance 
	constructors.                                        member.
2) we can use only in constructors as                2) we can use anywhere except static
   first line.                                           area.
3) we can use only once in constructor.				 3) we can use any no. of times.

class Test{
	public static void main(String[] args) {
//		System.out.println(super.hashCode());//CE: cannot use super in static reference
	}
}
 */
	public static void main(String[] args) {}
}

package _06_OOP;

public class _28_Overloaded_constructor {
/*
 * 1. within a class we can declare multiple constructors and all these constructors
 * 		having same name but different type of arguments hence all these constructors
 * 		are considered as overloaded constructors, ie overloading is applicable for 
 * 		constructors. 
				
				class Test{
					Test(){
						this(10);
						System.out.println("no-arg");
					}
					Test(int i){
						this(10d);
						System.out.println("int-arg");
					}
					Test(double d){
						System.out.println("double-arg");
					}
					public static void main(String[] args) {
						Test t1 = new Test();
						System.out.println("**********");
						
						Test t2 = new Test(10);
						System.out.println("**********");
						
						Test t3 = new Test(10.5);
						System.out.println("**********");
						
						Test t4 = new Test(10l);
						System.out.println("**********");
					}
				}
o/p:
double-arg
int-arg
no-arg
**********
double-arg
int-arg
**********
double-arg
**********
double-arg
**********
=================
2. for constructors inheritance and overriding concepts are not applicable but overloading
		concept is applicable.
3. every class in java including abstract class can contain constructor but interface cannot
		contain constructor.
-------
class Test{           valid
	Test(){
	}
}
-------
abstract class Test{   valid
	Test(){
		
	}
}
-------
interface Test{               invalid
//	Test(){//CE:Interfaces cannot have constructors
//		
//	}
}		
=============================================================================
case 1) Recursive method call is a runtime exception saying StackOverFlowError but in our
		if there is chance of recursive constructor invocation then the code wont
		compile and we will get compile time error.
class Test{
	public static void m1() {
		m2();
	}
	public static void m2() {
		m1();
	}
	public static void main(String[] args) {
		m1();//CE:Exception in thread "main" java.lang.StackOverflowError
		System.out.println("hello");
	}
}
------
class Test{
	Test(){
		this(10);//CE:Recursive constructor invocation Test(int)
	}
	Test(int i){
		this();//CE:Recursive constructor invocation Test()
	}
	public static void main(String[] args) {
		System.out.println("hello");
	}
}
================================================================================
case 2)
--> valid
class P{
	
}
class C extends P{
	
}
--> valid
class P{
	P(){

	}
}
class C extends P{

}
--> invalid
class P{
	P(int i){

	}
}
class C extends P{//CE:Implicit super constructor P() is undefined for default constructor.
				 //Must define an explicit constructor
}		
================================================================================
Note: 1) if parent class contains any argument constructor then while writing
		 child classes we have to take special care w.r.t constructors
	  2) whenever we writing any argument constructor it is highly recommended
	   		no-arg constructor also.
================================================================================
case 3) if parent class constructor throws any checked exception, compulsary child class
		constructor should throw the same checked exception or its parent otherwise the
		code wont compile.
		
class P{                        invalid
	P() throws IOException{
		
	}
}
class C extends P{//CE:Default constructor cannot handle exception type IOException
	             //thrown by implicit super constructor.
                //Must define an explicit constructor
}
----
class P{                             valid
	P() throws IOException{
		
	}
}
class C extends P{
	C() throws IOException,Exception,Throwable{
		
	}
}	   		
================================================================================
Question) which of the following is valid?
1) the main purpose of constructor is to create object? false.
2) the main purpose of constructor is to perform initialization of object? true.
3) the name of the constructor need not be same as the class name? false.
4) return type concept applicable for constructors but only void? false.
5) we can apply any modifier on constructor? false.
6) default constructor is generated by jvm? false.
7) compiler is responsible to generate default constructor? true.
8) compile will always generate default constructor? false.
9) if we are not writing no-arg constructor then compiler will generate default constructor.
10) every no-arg constructor is always default constructor? false.
11) default constructor is always no-arg constructor? true.
12) the 1st line every constructor should be super() or this(), if we are not writing
     anything then compiler will generate this()? false.
13) for constructors both overloading and overriding concepts are applicable? false.
14) for constructors inheritance concept applicable but not overriding? false.
15) only concrete class can contain constructors but abstract classes
 	cannot contain constructors? false.
16) interface can contain constructors? false.
17) recursive constructor invocation is runtime exception? false.
18) if parent class constructor throws some checked exception then compulsory child
 	    class constructor should throw the same checked exception or its child? false. 	    
 */
	public static void main(String[] args) {}
}
